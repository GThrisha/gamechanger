Agenda:

Functions
1.define
2.call
3.return 
4.func with and without return
5.recursive function
Set,Dictionaries,in-built functions in python-range(),rstrip(),split(),input(),print()
Dynamic programming


Functions:
reusability
clean and readable and light weight
def function_name():
in python,function can return multiple values.

def add():
    try:
        a = int(input())
    except ValueError as err:
        print(err)
    try:
        b = int(input())
    except ValueError as err:
        print(err)
    print(a+b)


#add()

def addNumbers():
    a = 10
    b = 20
    return (a+b)


sum = addNumbers()
#print(sum)


def addNumber(a,b):
    return a+b


sum = addNumber(10,30)



def returningMultipleValues():
    return 10,20,30

output = returningMultipleValues()
print(output)   #(10,20,30)

Fibonacci series
0 1 1 2 3 5 8 13 21 34......

def fibonacci(n):
    if n<=0:
        print("invalid argument")
        return -1
    if n==1:
        print(0)
        return -1
    if n==2:
        print(0," ",1)
        return -1
    a=0
    b=1
    print(a," ",b)
    count=3
    while count<= n:
        next=a+b
        print(next,end=" ")
        a=b
        b=next
        count+=1
fibonacci(10)
# always count+=1 is faster than count++

LCM-least common multiple
def findLcm(a,b):
    if a>b:
        greater=a
    else:
        greater=b
    while True:
        if((greater%a==0) and (greater%b)==0):
            lcm=greater
            break
        greater+=1
    return lcm
print(findLcm(20,30))

HCF-highest common factor

Recursion-a function calling itself
function a()
{
  a();
}
Example:
def doJob2(n):
    if n<=5:
        return -1
    doJob2(n-1)
    print(n)
    doJob2(n-1)
    print(n)
doJob2(8)
o/p:66766786676678

