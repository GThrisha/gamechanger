oops:
*pillars of oops
*implement all pillars
*few fancy terms
Project: console based mini project -library management system

constructor-will be executed just before creation of an object
destructor-will be executed just before destruction of an object
when we want to perform something everytime before creating an object,do it inside a constructor
when we want to perform something everytime before destructor an object,do it inside a destructor

class Book:
    numberOfPages = 145
    author = "sudhanshu"
    scope = "To be sold in india"

    def __init__(self , zone , dob):
        self.zone = zone
        self.dob = dob
    def __del__(self):
        print("destructor is called")

my_book = Book("Mystery","25-10-1998")
print(my_book.numberOfPages)
print(my_book.zone)
print(my_book.dob)
del my_book
o/p: 145
     Mystery
     25-10-1998
     destructor is called
     
 four pillarsof OOPs:
 1.inheritance
 2.polymorphism
 3.abstraction
 3.Encapsulation
 
 1.Inheritance-phenomenon in which child classes will have access to parent resources
 acquiring /having access to parent properties
 parent will not have access to child resources
 
 class Parent1:
    def getParentName(self):
        return "parent1"
class Parent2:
    def getParentName(self):
        return "Parent2"
class Parent3:
    def getParentName(self):
        return "Parent 3"
class Child(Parent1 , Parent2 , Parent3):
    def getAllParent(self):
        print("Child class")
        print(Parent1.getParentName(self))
        print(Parent2.getParentName(self))
        print(Parent3.getParentName(self))
obj=Child()
obj.getAllParent()
o/p:Child class
parent1
Parent2
Parent 3

class Parent1:
    def getName(self):
        return "parent1"
class Parent2:
    def getName(self):
        return "Parent2"
class Parent3:
    def getName(self):
        return "Parent 3"

class Child(Parent1 , Parent2 , Parent3):
    def __init__(self):
        self.getAllParent()
    def getAllParent(self):
        print("trying to get all parents of this class")
        parent_list = []
        for base in Child.__bases__:
            parent_list.append(base)
        print(parent_list)
my_child = Child()
#parent_list = []
#print(my_child.__bases__)
#for base in Child.__bases__:
    #print(base,end=" ")

#print(my_child.getName())
o/p: trying to get all parents of this class
[<class '__main__.Parent1'>, <class '__main__.Parent2'>, <class '__main__.Parent3'>]

 
