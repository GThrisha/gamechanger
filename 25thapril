Agenda:
dictionaries,sets
Recursion/Problem statements(Towers  of Hanoi)
Dynamic Programming
Object Oriented Programming

Recursive solution to print nth fibonacci number
def fib(n):
    if n<=0:
        return -1;
    elif n==1:
        return 0;
    elif n==2:
        return 1;
    else:
        return fib(n-1)+fib(n-2);
result=fib(10)
print(result)

Sum of N Fibonacci Numbers

def sumOfNFibonaciNumber(n):
    if n<=0:
        return -1
    if n == 1:
        return 0
    if n==2:
        return 1
    first , second = 0 , 1
    result = first + second
    for i in range(0,n-2):
        next = first + second
        result+=next
        first = second
        second = next
    print(result)

sumOfNFibonaciNumber(10)
o/p:88

Set:
set is a data structure which doesn'y allow duplicate values
set is an unordered and unindexed
arr=[1,3,2,4,6,7,5,2,3,4]
my_set=set(arr)
print(my_set)
o/p: {1, 2, 3, 4, 5, 6, 7}
my_set.add(34)
print(my_set)
o/p: {1, 2, 3, 4, 5, 6, 7, 34}
 my_set.clear()
 print(my_set)
o/p: set()

Dictionary:
stores data in key-value pairs
it is ordered
it is changeable
it doesnt allow duplicates
how to create a dictionary?
 d={}
 type(d)
<class 'dict'>

how to access key in dictionary?
 d={'name':'thrisha','age':20,'occupation':'student'}
 print(d['name'])
o/p: thrisha

 d['name']='thrish'  #updating values
 print(d['name'])    #we can also use update() method
o/p: thrish

update() :
mydict={'name':'TG'}
d.update(mydict)
print(d['name'])
o/p: TG

items():Returns a list containing a tuple for each key value pair
d.items()
o/p: dict_items([('name', 'TG'), ('age', 20), ('occupation', 'student')])

keys():Returns a list containing the dictionary's keys
d.keys()
o/p: dict_keys(['name', 'age', 'occupation'])

Object Oriented Programming:
it is a programming logic that revolves around the concept of classes and instances of those classes.
class Car:
 engineType="Strongest Engine"
 numberOfTyres=6
 numberOfWindows=6
 IsFridgeAvailable=True
 
def getNumberOfWindows(self):
 return self.numberOfWindows
 
def getNumberOfTyres(self):
 return self.numberOfTyres
 
car1=new Car()
printt(car1.engineType)     #1st way to access properties
o/p:Strongest Engine

print(car1.getNumberOfWindows())   #6
print(car1.getnumberofTyres())     #4
